# -*- coding: utf-8 -*-


Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oUnLTPPZ6WyfIW8oRfjqclzjJx2QjGgp


### Užduotis 1

Susikurkite programą, kurioje vartotojas galėtų nusakyti kiek atsitiktinių skaičių turėtų būti sugeneruota. Tuomet programa turėtų būtent tokį kiekį atsitiktinių skaičių sugeneruoti ir sudėti į sąrašą. Išveskite visus šiuos skaičius ekrane. Tuomet tuos pačius skaičius išveskite ekrane dar kartą, tačiau viską spausdinkite atskirose eilutėse, eilutėje nurodant patį skaičių ir jo kvadratą.
"""

import random                                                    #generuosime atsitiktinius skaicius
skaiciai = []                                                    # sukuriam sarasa, i kuri tuos skaicius patalpinsime
kiek = int(input('Kiek atsitiktinių skaičių norite sugeneruoti?')) #klausiame, kiek skaiciu reikes generuoti?
for sk in range(kiek):                                             #sukam cikla tiek, kiek vartotojas suvede
    skaiciai.append(random.randint(1, 10))                         #random skaicius ima nuo 1 iki 10, ir prideda(append)i list'a skaiciai
print('sugeneruoti skaičiai:', skaiciai)
for sk in skaiciai:                                              #norint isvardinti atskirose eilutese vel sukam cikla
    print(f'Skaičius: {sk} ir jo kvadratas: {sk ** 2}')          #printe pasirasom ka norim isprintinti

"""### Užduotis 2

Susikurkite norimą sąrašą su duomenimis. Išsiveskite viso šio sąrašo informaciją. Pakeiskite trijų pasirinktų narių reikšmes į kitas. Išsiveskite pakeisto sąrašo informaciją.
"""

skaiciai = [2, 4, 1, 9, 8, 10, 2, 3, 4]
print(skaiciai)
skaiciai[-1] = 5
skaiciai[-2] = 7
skaiciai[-3] = 6
print(skaiciai)

"""### Užduotis 3

Susikurkite sąrašą ir jį užpildykite skaičiais (savarankiškai arba atsitiktiniais). Iš pradžių išveskite tekstą "lyginiai skaičiai" ir visus lyginius skaičius. Tuomet išveskite tekstą "visi nelyginiai skaičiai" ir visus nelyginius skaičius. Bei ant galo tekstą "visi skaičiai, kurie dalinasi iš 3" ir visus skaičius, kurie atitinka tokią sąlygą.
"""

skaiciai = [2, 4, 1, 9, 8, 10, 2, 3, 4]
lyg_skaiciai = []
nelyg_skaiciai = []
dalinasi_3 = []
for sk in skaiciai:
    if sk % 2 ==0:
        lyg_skaiciai.append(sk)
    if sk % 2 !=0:
        nelyg_skaiciai.append(sk)
    if sk % 3 ==0:
        dalinasi_3.append(sk)


print('Lyginiai skaičiai:', lyg_skaiciai)
print('Nelyginiai skaičiai:', nelyg_skaiciai)
print('Skaičiai, kurie dalinasi iš 3:', dalinasi_3)

"""### Užduotis 4

Susikurkite sąrašą ir jį užpildykite atsitiktiniais skaičiais. Išveskite visus skaičius didesnius nei vidurkis.
"""

skaiciai = [2, 4, 1, 9, 8, 10, 2, 3, 4]
virs_vidurkio = []
suma = sum(skaiciai)
print('Suma: ', suma)
vidurkis = suma / len(skaiciai)
print('Vidurkis:', round(vidurkis, 2))
for sk in skaiciai:
    if sk > vidurkis:
        virs_vidurkio.append(sk)
print('Skaičiai virš vidurkio: ', virs_vidurkio)

"""### Užduotis 5

Susikurkite programą, kurioje būtų sukurtas sąrašas iš pasirinkto kiekio atsitiktinių skaičių. Raskite kiekvieno skaičiaus daliklius, pavyzdžiui:

```
skaičius 2 dalinasi iš 2
skaičius 3 dalinasi iš 3
skaičius 4 dalinasi iš 2, 4
skaičius 5 dalinasi iš 5
skaičius 6 dalinasi iš 2, 3, 6
```
"""

skaiciai = [2, 4, 1, 9, 8, 10, 2, 3, 4, 6]
for skaicius in skaiciai:
    dalikliai = []
    for daliklis in range(2, skaicius + 1):
        if skaicius % daliklis == 0:
            dalikliai.append(daliklis)
    print('skaičius', skaicius, 'dalinasi iš', ', '.join(map(str, dalikliai)))

"""### Užduotis 6

Sukurkite programą, kurioje vartotojas galėtų įvesti norimą kiekį žodžių (pasirenka iš pradžių ir vykdomas for iki to kiekio skaičiaus, arba vykdomas while kol neįveda q ar kokio kito simbolio/žodžio). Išveskite visus šiuos žodžius ekrane.
"""

kiekis = int(input('Įveskite žodžių kiekį: '))
for i in range(kiekis):
    zodis = input('Įveskite žodį: ')
    print(zodis)

"""### Užduotis 7

Susikurkite sąrašą iš pasirinktų žodžių. Atskirose eilutėse išveskite patį žodį, jo raidžių kiekį.
"""

miestai = ['Vilnius', 'Kaunas', 'Klaipėda', 'Šiauliai', 'Panevėžys', 'Alytus']

for miestas in miestai:
    print(miestas, len(miestas))

"""### Užduotis 8

Susikurkite pažymių sąrašą. Šiuos pažymius leiskite įvesti vartotojui. Baigus įvedimą, išveskite suvestų pažymių vidurkį. Taip pat, jeigu studentas turėjo neigiamų pažymių, tuomet atskirai parodykite tuos neigiamus pažymius ir jų kiekį.
"""

pažymiai = []

while True:
    ivestis = input("Įveskite pažymį (arba '-' jei norite baigti): ")

    if ivestis == '-':
        break

    pažymys = int(ivestis)
    pažymiai.append(pažymys)

vidurkis = sum(pažymiai) / len(pažymiai)

neigiami_pažymiai = [pažymys for pažymys in pažymiai if pažymys < 5] #Sąrašo perdarymas (list comprehension)

print('Pažymių vidurkis:', vidurkis)

if neigiami_pažymiai:
    print('Neigiami pažymiai:', neigiami_pažymiai)
    print('Neigiamų pažymių kiekis:', len(neigiami_pažymiai))

"""### Užduotis 9

Susikurkite žodžių sąrašą. Raskite ir išveskite trumpiausią ir ilgiausią žodžius, bei jų raidžių kiekius.
"""

miestai = ['Vilnius', 'Kaunas', 'Nida', 'Klaipėda', 'Šiauliai', 'Panevėžys', 'Alytus']
trumpiausias = min(miestai, key=len)      # key funkcija rusiuoja pagal len ilgi
ilgiausias = max(miestai, key=len)

print('Trumpiausias žodis:', trumpiausias)
print('Raidžių kiekis:', len(trumpiausias))
print()
print('Ilgiausias žodis:', ilgiausias)
print('Raidžių kiekis:', len(ilgiausias))

"""### Užduotis 10

Sugeneruokite 100-ą atsitiktinių skaičių ir sukelkite visus tuos skaičius į sąrašą. Atlikite šiuos veiksmus:

- Raskite mažiausią skaičių, didžiausią skaičių, bei vidurkį.
- Tuomet atrinkite į atskirą sąrašą skaičius, kurie žemesni nei vidurkis. Raskite šių skaičių vidurkį.
- Taip pat, atrinkite į dar vieną sąrašą skaičius, kurie didesni nei vidurkis. Raskite šių skaičių vidurkį.
- Ekrane išveskite pradinius duomenis, mažiausią ir didžiausią skaičius, rastą vidurkį, pirmus atrinktus skaičius ir jų vidurkį, antrus atrinktus skaičius ir jų vidurkį.
"""

import random

skaiciai = []

for _ in range(100):
    skaicius = random.randint(1, 1000)
    skaiciai.append(skaicius)

maziausias = min(skaiciai)
didziausias = max(skaiciai)
vidurkis = sum(skaiciai) / len(skaiciai)

zemesni = [skaicius for skaicius in skaiciai if skaicius < vidurkis]   #Sąrašo perdarymas (list comprehension)
zemesni_vidurkis = sum(zemesni) / len(zemesni)

didieji = [skaicius for skaicius in skaiciai if skaicius > vidurkis]
didieji_vidurkis = sum(didieji) / len(didieji)

print('Pradiniai duomenys:')
print(skaiciai)
print('Mažiausias skaičius:', maziausias)
print('Didžiausias skaičius:', didziausias)
print('Vidurkis:', vidurkis)
print('Pirmi atrinkti skaičiai:', zemesni)
print('Jų vidurkis:', zemesni_vidurkis)
print('Antri atrinkti skaičiai:', didieji)
print('Jų vidurkis:', didieji_vidurkis)

"""### Užduotis 11

Susikurkite žodžių masyvą. Išveskite per kiek simbolių yra ilgesnis ilgiausias žodis už trumpiausią. Tarkime ilgiausias yra “kompiuteris” (11 simbolių), o trumpiausias “medis” (5), skirtumas tarp jų 11 - 5 = 6 simboliai.
"""

miestai = ['Vilnius', 'Kaunas', 'Nida', 'Klaipėda', 'Šiauliai', 'Panevėžys', 'Alytus']
trumpiausias = min(miestai, key=len)      # key funkcija rusiuoja pagal len ilgi
ilgiausias = max(miestai, key=len)
print(trumpiausias, len(trumpiausias))
print(ilgiausias, len(ilgiausias))
per_kiek = len(ilgiausias) - len(trumpiausias)
print('Ilgiausias žodis yra ilgesnis per ', per_kiek)

"""### Užduotis 12

Susikurkite dviejų studentų pažymių sąrašus. Šią informaciją leiskite suvesti vartotojui. Raskite kurio studento vidurkis yra geresnis. Taip pat, ar kuris iš jų (ar abu) turi neigiamų pažymių.
"""

pažymiai1 = []

while True:
    ivestis = input("Įveskite pirmo studento pažymį (arba '-' jei norite baigti): ")

    if ivestis == '-':
        break

    pažymys = int(ivestis)
    pažymiai1.append(pažymys)
pažymiai2 = []
print()
while True:
    ivestis = input("Įveskite antro studento pažymį (arba '-' jei norite baigti): ")

    if ivestis == '-':
        break

    pažymys = int(ivestis)
    pažymiai2.append(pažymys)
vidurkis1 = sum(pažymiai1) / len(pažymiai1)
vidurkis2 = sum(pažymiai2) / len(pažymiai2)
print()
if vidurkis1 > vidurkis2:
    print('Pirmo studento vidurkis geresnis')
elif vidurkis2 > vidurkis1:
    print('Antro studento vidurkis geresnis')
else:
    print('Vidurkiai lygus')
print()
neigiami_pažymiai1 = [pažymys for pažymys in pažymiai1 if pažymys < 5]
neigiami_pažymiai2 = [pažymys for pažymys in pažymiai2 if pažymys < 5]
if neigiami_pažymiai1:
    print('Pirmo studento neigiami pažymiai:', neigiami_pažymiai1)
if neigiami_pažymiai2:
    print('Antro studento neigiami pažymiai:', neigiami_pažymiai2)

"""### Užduotis 13

Susikurkite skaičių masyvą ir užpildykite jį atsitiktiniais skaičiais. Raskite visų skaičių, kurie dalinasi iš 4 sumą.
"""

import random

skaiciai = []

for _ in range(10):
    skaicius = random.randint(1, 10)
    skaiciai.append(skaicius)
print(skaiciai)
dalinasi_is_keturiu = []
for sk in skaiciai:
    if sk % 4 ==0:
        dalinasi_is_keturiu.append(sk)
print('Dalinasi iš keturių: ', dalinasi_is_keturiu)
suma = sum(dalinasi_is_keturiu)
print(suma)

"""### Užduotis 14

Susikurkite skaičių masyvą ir užpildykite jį duomenimis. Išveskite visus skaičius atskirose eilutėse. Prie kiekvieno lyginio skaičiaus dar išvedant jo kvadratą.
"""

skaiciai = [2, 4, 1, 9, 8, 10, 2, 3, 4, 6]
for sk in skaiciai:
    if sk % 2 ==0:
        print(sk, sk * sk)
    else:
        print(sk)

"""### Užduotis 15

Susikurkite studento pažymių sąrašą ir užpildykite jį duomenimis (atsitiktiniais arba kokius įrašysite). Išveskite kiekvieną pažymį atskiroje eilutėje. Prie kiekvieno pažymio nurodykite ar tai teigiamas, ar neigiamas pažymys. Taip pat, jeigu neigiamas pažymys, tuomet dar nurodykite kiek balų trūko iki teigiamo pažymio. Teigiamas pažymys skaitosi 5 balai.
"""

pazymiai = [2, 4, 1, 9, 8, 10, 5, 3, 4, 6]
for paz in pazymiai:
    if paz >4:
        print('Teigiamas: ', paz)
    if paz<=4:
        print(f'Neigiamas: {paz},trūko {5-paz} balų (-o)' )

"""### Užduotis 16

Susikurkite žodžių sąrašą ir užpildykite duomenimis. Išveskite visus žodžius ekrane, nurodant iš kiek raidžių kiekvienas šis žodis yra sudarytas. Papildykite programą taip, kad rastumėte visų raidžių kiekį (pvz yra žodžiai "medis" ir "alus", 5 ir 4 raidės atitinkamai, o jas sudėjus gaunasi 9 raidės).
"""

miestai = ['Vilnius', 'Kaunas', 'Nida', 'Klaipėda', 'Šiauliai', 'Panevėžys', 'Alytus']
raides_suma = 0
for miestas in miestai:
    ilgis = len(miestas)
    raides_suma += ilgis
    print(f"{miestas}: {ilgis} raidžių")
print(f"Visų žodžių raidžių suma: {raides_suma}")

"""### Užduotis 17

Susikurkite skaičių sąrašą ir užpildykite duomenimis. Raskite visų skaičių, kurie dalinasi iš 3 sumą ir vidurkį. Išveskite pradinius duomenis ir gautus atsakymus.
"""

skaiciai = [12, 7, 21, 18, 9, 4, 15, 27, 6, 10]
dalijasi_is_3 = []
suma = 0
for skaicius in skaiciai:
    if skaicius % 3 == 0:
        dalijasi_is_3.append(skaicius)
        suma += skaicius
kiekis = len(dalijasi_is_3)
vidurkis = suma / kiekis

print(f"Pradiniai duomenys: {skaiciai}")
print(f"Skaičių, kurie dalinasi iš 3, suma: {suma}")
print(f"Skaičių, kurie dalinasi iš 3, vidurkis: {vidurkis}")

"""### Užduotis 18

Susikurkite sąrašą failų pavadinimams saugoti, užpildykite jį duomenimis. Įsivaizduokite kad jums reikės nuskaityti šiuos failus, todėl pirma norėsite patikrinti su kuriais galite dirbti. Atrinkite į atskirą sąrašą tik tuos failus, kurių galūnė yra .txt arba .json tipo. Išveskite atrinktus duomenis.
"""

failu_pavadinimai = ['morkos.txt', 'burokai.csv', 'brokoliai.json', 'bulves.txt', 'zirniai.xlsx', 'vysnios.json']
atrinkti_failai = []
for pavadinimas in failu_pavadinimai:
    if pavadinimas.endswith('.txt') or pavadinimas.endswith('.json'):
        atrinkti_failai.append(pavadinimas)
print("Atrinkti failai:")
print()
for failas in atrinkti_failai:
    print(failas)

"""### Užduotis 19

Susikurkite sąrašą įvykusių klaidų kodams saugoti ir užpildykite šį masyvą duomenimis. Tuomet išveskite visas sukauptas klaidas administratoriui, taip, kad jis suprastų kas per klaidos įvyko. Pavyzdžiui, jeigu yra kodas "ui87", tai kad išvestų "Grafinės sąsajos klaida navigacijoje", arba jeigu kodas "sys12", tuomet "Trūksta operatyviosios atminties sistemoje" ir pan.
"""

klaidu_kodai = {
    "ui87": "Grafinės sąsajos klaida navigacijoje",
    "sys12": "Trūksta operatyviosios atminties sistemoje",
    "db32": "Duomenų bazės ryšio klaida",
    "net56": "Nepavyko prisijungti prie tinklo"
}

ivykusios_klaidos = ["ui87", "sys12", "db32"]

print("Ivykusios klaidos:")
for klaidos_kodas in ivykusios_klaidos:
    if klaidos_kodas in klaidu_kodai:
        klaidos_aprasymas = klaidu_kodai[klaidos_kodas]
        print(f"{klaidos_kodas}: {klaidos_aprasymas}")
    else:
        print(f"{klaidos_kodas}: Nežinoma klaida")

"""### Užduotis 20

Susikurkite sąrašą sandėlio likučiams saugoti (kiekvienas atskiras narys sąraše yra atskiros prekės likutis). Su kiekvienu likučiu paskaičiuokite per kiek dienų bus išpirktas, jei per dieną vidutiniškai yra nuperkami 5 vnt. Išveskite atsakymus atskirose eilutėse, nurodant kiek yra dabar ir kiek dienų užteks jo. Pavyzdžiui, jeigu yra likučiai 74, 54 ir 32, tai 74 vnt. prekės užteks maždaug 15 dienų, 54 vnt. prekės užteks maždaug 11 dienų ir t.t. Pabandykite papildyti programą taip, kad į atskirą sąrašą atrinktų tas prekes, kurių užteks savaitei ar mažiau, jas išveskite atskirai, pačioje pabaigoje.
"""

likuciai = [74, 54, 32, 100, 15, 45, 60]
per_diena = 5

print("Likutis (vnt.) | Dienų skaičius")
print()
for likutis in likuciai:
    dienos = likutis / per_diena
    print(f"{likutis:14} | {dienos:14}")
print()
print("Prekės, kurių užteks savaitei ar mažiau:")
atrinktos_prekes = []
for likutis in likuciai:
    dienos = likutis / per_diena
    if dienos <= 7:
        atrinktos_prekes.append(likutis)
        print(likutis)

"""### Užduotis 21

Susikurkite sąrašą norimiems žodžiams saugoti. Užpildykite šį sąrašą duomenimis. Į kitą sąrašą atrinkite tuos žodžius, kurie yra trumpi (sudaro mažiau nei 5 raidės). Išveskite pradinius duomenis ir atrinktus.
"""

miestai = ['Vilnius', 'Kaunas', 'Nida', 'Klaipėda', 'Šiauliai', 'Panevėžys', 'Alytus']
trumpi_zodziai = []
print("Pradiniai duomenys:")
for miestas in miestai:
    print(miestas)
print()
print("Atrinkti žodžiai (trumpi):")
for miestas in miestai:
    if len(miestas) < 5:
        trumpi_zodziai.append(miestas)
        print(miestas)